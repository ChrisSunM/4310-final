<html>

<head>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
    #map {
      fill: white;
    }

    #x-select {
      margin-left: 800px;
    }
  </style>
</head>

<body>
  <h2>final project</h2>
  <div>
    <button id="button1">Early career pay</button>
    <button id="button2">Mid career pay</button>
  </div>
  </br>
  <div>
    <svg id="map" height="800" width="1000" style="border:1px solid black;"> </svg>
  </div>
  <br>
  <br>
  <select id="y-select">
    <option value="income">Early Income</option>
    <option value="tuition">Average Tuition</option>
    <option value="betterWorld">Percentage making the world better</option>
  </select>
  <div>
    <svg id="scatterplot" height="800" width="1000"></svg>
  </div>
  <select id="x-select">
    <option value="tuition">Average Tuition</option>
    <option value="income">Early Income</option>
    <option value="betterWorld">Percentage making the world better</option>
  </select>

</body>
<script>
  const map = d3.select("#map")
  const graph = d3.select("#scatterplot")


  const graphMargins = { t: 30, r: 30, b: 30, l: 30 }
  const mapMargins = { t: 0, r: 0, b: 0, l: 0 }

  const plot = graph.append("g")


  const mapWidth = 1000
  const mapHeight = 800

  const graphWidth = 1000 - graphMargins.l - graphMargins.r
  const graphHeight = 800 - graphMargins.t - graphMargins.b

  const mapArea = map.append("g")
    .attr("transform", `translate(${mapMargins.l},${mapMargins.t})`)

  const yAxisArea = plot.append("g")
    .attr("transform", "translate(" + (graphMargins.l) + "," + graphMargins.t + ")");
  const xAxisArea = plot.append("g")
    .attr("transform", "translate(" + graphMargins.l + "," + (graphHeight + graphMargins.t) + ")");
  const graphArea = plot.append("g")
    .attr("transform", "translate(" + graphMargins.l + "," + graphMargins.t + ")")

  plot.append("defs").append("clipPath")
    .attr("id", "chartClip")
    .append("rect").attr("x", 0)
    .attr("y", 0)
    .attr("width", graphWidth)
    .attr("height", graphHeight);
  graphArea.attr("clip-path", "url(#chartClip)")

  let render = async function () {
    let usMap = await d3.json("datasets/us-map.json")

    // Creating map
    let states = topojson.feature(usMap, usMap.objects.states);
    let statesMesh = topojson.mesh(usMap, usMap.objects.states);
    let projection = d3.geoAlbersUsa().fitSize([1000, 800], states);
    let path = d3.geoPath().projection(projection);
    let defs = mapArea.append("defs");

    let linearGradient = defs.append("linearGradient")
      .attr("id", "linear-gradient");

    let legend = mapArea.append("g")
      .attr("class", "legend")
      .attr("transform", "translate(" + (200) + "," + (750) + ")");

    legend.append("rect")
      .attr("width", 650)
      .attr("height", 20)
      .style("fill", "url(#linear-gradient)");

    mapArea.selectAll("path.state").data(states.features)
      .attr("class", "state")
      .join("path")
      .attr("d", path)
      .attr("stroke", "black")


    //dataset with actual demographics + college names
    let colleges = await d3.csv("datasets/salary_potential.csv")
    //new dataset found, linked in second document
    let largeData = await d3.csv("datasets/hd2021.csv")

    //dataset made from filtering and processing in jupyter notebook
    let finalcolleges = await d3.csv("datasets/filtered_colleges.csv")
    console.log(finalcolleges)
    // Use a map to link colleges and their associated data
    let collegeMap = new Map(colleges.map(d => [d.name, d]));

    finalcolleges.forEach(d => {
      d.Position = projection([d.LONGITUD, d.LATITUDE])
      let collegeInfo = collegeMap.get(d.INSTNM);
      if (collegeInfo) {
        d.early_career_pay = +collegeInfo.early_career_pay;
        d.mid_career_pay = +collegeInfo.mid_career_pay;
      }
    });

    // Now finalcolleges contains the merged data
    console.log(finalcolleges);
    // Custom interpolator function for red-orange-green gradient
    function redOrangeGreen(t) {
      return d3.interpolateRgb(
        d3.interpolateRgb("red", "orange")(t),
        "green"
      )(t);
    }

    // Create color scales
    let earlyCareerPayScale = d3.scaleSequential()
      .domain(d3.extent(finalcolleges, d => +d.early_career_pay))
      .interpolator(redOrangeGreen);

    let midCareerPayScale = d3.scaleSequential()
      .domain(d3.extent(finalcolleges, d => +d.mid_career_pay))
      .interpolator(redOrangeGreen);

    var clicked = null;
    var k = 1;
    let circles;
    finalcolleges.forEach(d => {
      circles = mapArea.selectAll("circle").data(finalcolleges)
        .join("circle")
        .attr("cx", d => {
          if (d.Position != null) {
            return d.Position[0]
          }
        })
        .attr("cy", d => {
          if (d.Position != null) {
            return d.Position[1]
          }
        })
        .attr("r", 5 / k)
        .attr("fill", "gray")
        .on("click", function (d) {
          let selected = d3.select(this)
          let selectedData = selected.datum();
          if (clicked == this) {
            selected.transition().duration(550).attr("fill", "gray")
              .attr("r", 5)
              .style("stroke", "none")
            clicked = null;
          } else {
            let pastNode;
            if (clicked == null) {
              pastNode = d3.select(this)
            } else {
              pastNode = d3.select(clicked)
            }
            pastNode.transition().duration(550).attr("fill", "gray")
              .attr("r", 5)
              .style("stroke", "none")
            selected.transition().duration(550).style('stroke', "black")
              .style('stroke-width', "2px")
              .attr('r', 50)
          }
          clicked = this;
        })
    })
    //zooming
    var zoom = d3.zoom().scaleExtent([1, 10]).on("zoom", zoomed);
    map.call(zoom);
    function zoomed(event) {
      mapArea.attr("transform", event.transform);
      circles.attr("r", 5 / event.transform.k)
      k = event.transform.k
    }
    // Get references to the two buttons
    const button1 = document.getElementById("button1");
    const button2 = document.getElementById("button2");

    // Function to update the colors based on the button clicked
    function buttonClicked(button) {
      let colorScale;

      if (button === "Button 1") {
        colorScale = earlyCareerPayScale;
      } else if (button === "Button 2") {
        colorScale = midCareerPayScale;
      }

      // Update the circles' colors based on the selected color scale
      mapArea.selectAll("circle")
        .attr("fill", d => colorScale(d[button === "Button 1" ? 'early_career_pay' : 'mid_career_pay']));

      // Update the legend's gradient
      linearGradient.selectAll("stop").remove();
      linearGradient.selectAll("stop")
        .data(colorScale.ticks().map((t, i, n) => ({ offset: `${100 * i / n.length}%`, color: colorScale(t) })))
        .enter().append("stop")
        .attr("offset", d => d.offset)
        .attr("stop-color", d => d.color);

      // Update the legend's labels
      legend.selectAll("text").remove();
      legend.selectAll("text")
        .data(colorScale.ticks())
        .enter().append("text")
        .attr("x", (d, i, n) => `${650 * i / n.length}`)
        .attr("y", -5)
        .style('fill', 'black')
        .text(d => d);

      // Add tick lines
      legend.selectAll("line").remove();
      legend.selectAll("line")
        .data(colorScale.ticks())
        .enter().append("line")
        .attr("x1", (d, i, n) => `${650 * i / n.length}`)
        .attr("x2", (d, i, n) => `${650 * i / n.length}`)
        .attr("y1", 0)
        .attr("y2", 6)
        .style("stroke", "black");
    }

    // Add a click event listener to each button
    button1.addEventListener("click", function () {
      buttonClicked("Button 1");
    });

    button2.addEventListener("click", function () {
      buttonClicked("Button 2");
    });

    //customizable graph (base graph, y=avg starting income x=tuition (instate + outstate average))
    let incomeTuition = await d3.csv("datasets/TuitionIncome.csv")
    //x scale
    let bottomScale = d3.scaleLinear().domain([0, 75100]).range([15, graphWidth - 15])

    //y scale
    let leftScale = d3.scaleLinear().domain([32000, 92000]).range([graphHeight - 15, 15])

    let leftAxis = d3.axisLeft(leftScale).ticks(6).tickFormat(d3.format(".0s"));
    yAxisArea.append("g").attr("class", "y axis").call(leftAxis);
    let bottomAxis = d3.axisBottom(bottomScale);
    xAxisArea.append("g").attr("class", "x axis").call(bottomAxis);
    /*
        let yGridlines = d3.axisLeft(incomeScale).ticks(6).tickSize(-graphWidth - 30).tickFormat("");
        yAxisArea.append("g").attr("class", "y gridlines").call(yGridlines);
        let xGridlines = d3.axisBottom(tuitionScale).tickSize(-graphHeight - 30).tickFormat("");
        xAxisArea.append("g").attr("class", "x gridlines").call(xGridlines);*/


    let viewport = graphArea.append("g");
    let graphCircles = viewport.selectAll("circle.graph").data(incomeTuition)
      .join("circle").attr("class", "graph")
      .attr("cx", d => {
        let avg = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
        return bottomScale(avg)
      })
      .attr("cy", d => {
        return leftScale(parseInt(d["early_career_pay"]))
      })
      .attr("r", 5)
      .attr("fill", "gray")

    graphArea.append("rect").attr("x", 0).attr("y", 0)
      .attr("width", graphWidth).attr("height", graphHeight)
      .attr("fill", "none")
      .style("pointer-events", "all");
    let zoomExtent = [[0, 0], [graphWidth, graphHeight]];
    let translateExtent = [[-100, -100], [graphWidth + 100, graphHeight + 100]];
    var plotZoom = d3.zoom()
      .extent(zoomExtent)
      .translateExtent(translateExtent)
      .scaleExtent([1, 10])
      .on("zoom", plotZoomed);

    graphArea.call(plotZoom);


    function plotZoomed({ transform }) {
      viewport.attr("transform", transform);

      let xScale = transform.rescaleX(bottomScale);
      let yScale = transform.rescaleY(leftScale);
      bottomAxis.scale(xScale);
      leftAxis.scale(yScale);
      /*
      yGridlines.scale(txScale);
      xGridlines.scale(tyScale);*/
      d3.select("g.y.axis").call(leftAxis);
      d3.select("g.x.axis").call(bottomAxis);

      /*
      d3.select("g.y.gridlines").call(yGridlines);
      d3.select("g.x.gridlines").call(xGridlines);*/


      graphCircles.attr("r", 5 / transform.k);
    }
    graphArea.call(plotZoom.transform, d3.zoomIdentity);

    //changing x and y axis
    document.getElementById("x-select").onchange = function () {
      let changeX = document.getElementById("x-select").value

      console.log(changeX)
      if (changeX == "betterWorld") {
        bottomScale = d3.scaleLinear().domain([30, 100]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(1500).attr("cx", d => {
          if (isNaN(parseInt(d["make_world_better_percent"])) == false) {
            return bottomScale(parseInt(d["make_world_better_percent"]))
          }
        })
      } else if (changeX == "income") {
        bottomScale = d3.scaleLinear().domain([32000, 92000]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(1500).attr("cx", d => {
          return bottomScale(parseInt(d["early_career_pay"]))
        })
      } else if (changeX == "tuition") {
        bottomScale = d3.scaleLinear().domain([0, 75100]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(1500).attr("cy", d => {
          let avg = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
          return bottomScale(avg)
        })
      }




    }
    document.getElementById("y-select").onchange = function () {
      let changeY = document.getElementById("y-select").value

      console.log(changeY)
      if (changeY == "betterWorld") {
        leftScale = d3.scaleLinear().domain([30, 100]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(1500).attr("cy", d => {
          if (isNaN(parseInt(d["make_world_better_percent"])) == false) {
            return leftScale(parseInt(d["make_world_better_percent"]))
          }
        })
      } else if (changeY == "income") {
        leftScale = d3.scaleLinear().domain([32000, 92000]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(1500).attr("cy", d => {
          return leftScale(parseInt(d["early_career_pay"]))
        })
      } else if (changeY == "tuition") {
        leftScale = d3.scaleLinear().domain([0, 75100]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(1500).attr("cy", d => {
          let avg = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
          return leftScale(avg)
        })
      }


    }

  }

  render();

</script>

</html>