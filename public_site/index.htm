<html>

<head>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <style>
    #map {
      fill: white;
    }

    #tooltip {
      position: absolute;
      padding: 2px;
      pointer-events: none;
      border-radius: 4px;
      box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.25);
      font: 15px sans-serif;
      color: #030303;
      line-height: 1;
      padding: 12px;
      background: rgb(250, 247, 247);
      color: rgb(19, 18, 18);
      border-radius: 2px;
    }

    #tooltipGraph {
      position: absolute;
      padding: 2px;
      pointer-events: none;
      border-radius: 4px;
      box-shadow: 3px 3px 10px 0px rgba(0, 0, 0, 0.25);
      font: 15px sans-serif;
      color: #030303;
      line-height: 1;
      padding: 12px;
      background: rgb(250, 247, 247);
      color: rgb(19, 18, 18);
      border-radius: 2px;
    }

    #x-select {
      margin-left: 800px;
    }

    #extra {
      float: right;
      width: 40%;
    }

    #graph {
      float: left;
      width: 60%;
    }

    #divPie {
      margin-bottom: 10px;

    }

    #pie {
      margin-top: 10px;

    }
  </style>
</head>

<body>
  <h2>Final Project</h2>
  <div>
    <svg id="map" height="800" width="1000" style="border:1px solid black;"> </svg>
    <button id="button1">Early career pay</button>
    <button id="button2">Mid career pay</button>
  </div>
  </br>
  <text>Drag a box to zoom! Double click to zoom back out! Hover over the dots for details.</text>

  <div id="tooltip"></div>
  <br>
  <br>

  <div id="scattergroup">
    <div id="graph">
      <select id="y-select">
        <option value="income">Early Income</option>
        <option value="tuition">Average Tuition</option>
        <option value="betterWorld">Percentage making the world better</option>
        <option value="stem">Stem Percent</option>
      </select>
      <svg id="scatterplot" height="800" width="1000"></svg>
    </div>
    <div id="extra">
      <div>
        <svg id="divPie" height="400" width="600"></svg>
      </div>
      <div>
        <svg id="pie" height="400" width="400"></svg>
      </div>
    </div>
  </div>
  <div id="tooltipGraph"></div>
  <select id="x-select">
    <option value="tuition">Average Tuition</option>
    <option value="income">Early Income</option>
    <option value="betterWorld">Percentage making the world better</option>
    <option value="stem">Stem Percent</option>
  </select>

  <button id="button3">Toggle School Type</button>
  <button id="button4">Toggle Gender Majority</button>
  <button id="button5">Toggle Race Majority</button>

</body>
<script>
  const map = d3.select("#map")
  const graph = d3.select("#scatterplot")
  const pieSvg = d3.select("#pie")
  const divPie = d3.select("#divPie")


  const graphMargins = { t: 30, r: 30, b: 30, l: 30 }
  const mapMargins = { t: 0, r: 0, b: 0, l: 0 }

  const plot = graph.append("g")

  const mapWidth = 1000
  const mapHeight = 800

  const graphWidth = 1000 - graphMargins.l - graphMargins.r
  const graphHeight = 800 - graphMargins.t - graphMargins.b

  const pieSvgArea = pieSvg.append("g")
    .attr("transform", "translate(" + 200 + "," + 200 + ")")

  const pieDivArea = divPie.append("g")
    .attr("transform", "translate(" + 200 + "," + 200 + ")")

  const mapArea = map.append("g")
    .attr("transform", `translate(${mapMargins.l},${mapMargins.t})`)

  const yAxisArea = plot.append("g")
    .attr("transform", "translate(" + (graphMargins.l) + "," + graphMargins.t + ")");
  const xAxisArea = plot.append("g")
    .attr("transform", "translate(" + (graphMargins.l) + "," + (graphHeight + graphMargins.t) + ")");
  const graphArea = plot.append("g")
    .attr("transform", "translate(" + graphMargins.l + "," + graphMargins.t + ")")

  plot.append("defs").append("clipPath")
    .attr("id", "chartClip")
    .append("rect").attr("x", 0)
    .attr("y", 0)
    .attr("width", graphWidth)
    .attr("height", graphHeight);
  graphArea.attr("clip-path", "url(#chartClip)")
    .attr("transform", `translate(${graphMargins.l},${graphMargins.t})`)
  graphArea.append("rect").attr("x", 0).attr("y", 0)
    .attr("width", graphWidth).attr("height", graphHeight)
    .attr("fill", "none")
    .style("pointer-events", "all");

  let render = async function () {
    let usMap = await d3.json("datasets/us-map.json")

    // Creating map
    let states = topojson.feature(usMap, usMap.objects.states);
    let statesMesh = topojson.mesh(usMap, usMap.objects.states);
    let projection = d3.geoAlbersUsa().fitSize([1000, 800], states);
    let path = d3.geoPath().projection(projection);
    let defs = map.append("defs");

    let linearGradient = defs.append("linearGradient")
      .attr("id", "linear-gradient");

    let legend = map.append("g")
      .attr("class", "legend")
      .attr("transform", "translate(" + (200) + "," + (750) + ")");

    legend.append("rect")
      .attr("width", 650)
      .attr("height", 20)
      .style("fill", "url(#linear-gradient)");

    mapArea.selectAll("path.state").data(states.features)
      .attr("class", "state")
      .join("path")
      .attr("d", path)
      .attr("stroke", "black")

    let finalData = await d3.csv("datasets/finalFiltered.csv")
    console.log(finalData)

    let k = 1
    // Define the zoom function
    function zoomed(event) {
      mapArea.attr("transform", event.transform);
      circles.attr("r", 5 / event.transform.k)
      k = event.transform.k
    }
    // Create a zoom behavior
    let zoom = d3.zoom()
      .scaleExtent([1, 10])
      .on('zoom', zoomed);

    // Create a brush behavior
    let brush = d3.brush()
      .extent([[0, 0], [mapWidth, mapHeight]])
      .on('brush end', brushed);

    // Add the brush to the map
    mapArea.append('g')
      .attr('class', 'brush')
      .call(brush);

    // Add the double click event listener to the map
    mapArea.on('dblclick', resetZoomAndBrush);

    // Define the resetZoomAndBrush function
    function resetZoomAndBrush() {
      // Transition the mapArea back to the original transform
      mapArea.transition()
        .duration(750)
        .call(zoom.transform, d3.zoomIdentity);

      // Remove the brush selection
      map.select('.brush').call(brush.move, null);
    }


    finalData.forEach(d => {
      d.Position = projection([d.LONGITUD, d.LATITUDE])
    });


    // Custom interpolator function for red-orange-green gradient
    function redOrangeGreen(t) {
      return d3.interpolateRgb(
        d3.interpolateRgb("red", "orange")(t),
        "green"
      )(t);
    }

    // Create color scales
    let earlyCareerPayScale = d3.scaleSequential()
      .domain(d3.extent(finalData, d => +d.early_career_pay))
      .interpolator(redOrangeGreen);

    let midCareerPayScale = d3.scaleSequential()
      .domain(d3.extent(finalData, d => +d.mid_career_pay))
      .interpolator(redOrangeGreen);

    finalData.forEach(d => {
      circles = mapArea.selectAll("circle").data(finalData)
        .join("circle")
        .attr("cx", d => {
          if (d.Position != null) {
            return d.Position[0]
          }
        })
        .attr("cy", d => {
          if (d.Position != null) {
            return d.Position[1]
          }
        })
        .attr("r", 5)
        .attr("fill", "gray")
        .on("mousemove", function (event, d) {
          d3.select(this).attr("stroke", "black").attr("stroke-width", 2 / k + "px")
            .attr('r', 15 / k)
            .attr('fill', "blue")
          let avgTuition = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
          if (d.type != undefined) {
            var text = "<b>Name:</b> " + d.name +
              "<br/><b>State:</b> " + d.STABBR +
              "<br/><b>Early Career Pay: </b> " + "$" + formatNumberWithCommas(d.early_career_pay) +
              "<br/><b>Mid Career Pay: </b> " + "$" + formatNumberWithCommas(d.mid_career_pay) +
              "<br/><b>STEM percent: </b>" + d.stem_percent +
              "%<br/><b>Tuition: </b>" + "$" + formatNumberWithCommas(avgTuition) +
              "<br/><b>Type:</b> " + d.type;
          } else {
            var text = "<b>Name:</b> " + d.name +
              "<br/><b>State:</b> " + d.STABBR +
              "<br/><b>Early Career Pay:</b> " + "$" + formatNumberWithCommas(d.early_career_pay) +
              "<br/><b>Mid Career Pay:</b> " + "$" + formatNumberWithCommas(d.mid_career_pay) +
              "<br/><b>STEM percent:</b> " + d.stem_percent + "%" +
              "<br/><b>Tuition: </b>" + "$" + formatNumberWithCommas(avgTuiton);
          }

          function formatNumberWithCommas(number) {
            return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          }


          d3.select('#tooltip').html(text)
            .style('left', (event.pageX + 25) + 'px')
            .style('top', (event.pageY - 28) + 'px').style('opacity', 1);
        })
        .on('mouseleave', function () {
          d3.select(this).attr("stroke", "none").attr('r', 5 / k).attr("fill", "grey")
          d3.select('#tooltip').style('opacity', 0)
        });
    })

    function brushed(event) {
      // If there is no selection, do nothing
      if (!event.selection) return;

      // Get the current zoom transform
      let currentZoom = d3.zoomTransform(mapArea.node());

      // Get the selection coordinates and adjust them based on the current zoom level
      let [[x0, y0], [x1, y1]] = event.selection;
      let [[tx0, ty0], [tx1, ty1]] = [[x0, y0], [x1, y1]].map(d => currentZoom.invert(d));

      // Calculate the new zoom parameters
      let dx = tx1 - tx0;
      let dy = ty1 - ty0;
      let x = (tx0 + tx1) / 2;
      let y = (ty0 + ty1) / 2;
      let scale = Math.max(1, Math.min(10, 0.9 / Math.max(dx / mapWidth, dy / mapHeight)));
      let translate = [mapWidth / 2 - scale * x, mapHeight / 2 - scale * y];

      // Apply the new zoom parameters
      mapArea.transition()
        .duration(750)
        .call(zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
    }

    // Get references to the two buttons
    const button1 = document.getElementById("button1");
    const button2 = document.getElementById("button2");

    // Function to update the colors based on the button clicked
    function buttonClicked(button) {
      let colorScale;

      if (button === "Button 1") {
        colorScale = earlyCareerPayScale;
      } else if (button === "Button 2") {
        colorScale = midCareerPayScale;
      }

      // Update the circles' colors based on the selected color scale
      mapArea.selectAll("circle")
        .attr("fill", d => colorScale(d[button === "Button 1" ? 'early_career_pay' : 'mid_career_pay']));

      // Update the legend's gradient
      linearGradient.selectAll("stop").remove();
      linearGradient.selectAll("stop")
        .data(colorScale.ticks().map((t, i, n) => ({ offset: `${100 * i / n.length}%`, color: colorScale(t) })))
        .enter().append("stop")
        .attr("offset", d => d.offset)
        .attr("stop-color", d => d.color);

      // Update the legend's labels
      legend.selectAll("text").remove();
      legend.selectAll("text")
        .data(colorScale.ticks())
        .enter().append("text")
        .attr("x", (d, i, n) => `${650 * i / n.length}`)
        .attr("y", -5)
        .style('fill', 'black')
        .text(d => d);

      // Add tick lines
      legend.selectAll("line").remove();
      legend.selectAll("line")
        .data(colorScale.ticks())
        .enter().append("line")
        .attr("x1", (d, i, n) => `${650 * i / n.length}`)
        .attr("x2", (d, i, n) => `${650 * i / n.length}`)
        .attr("y1", 0)
        .attr("y2", 6)
        .style("stroke", "black");
    }

    // Add a click event listener to each button
    button1.addEventListener("click", function () {
      buttonClicked("Button 1");
    });

    button2.addEventListener("click", function () {
      buttonClicked("Button 2");
    });

    //customizable graph (base graph, y=avg starting income x=tuition (instate + outstate average))

    //x scale
    let bottomScale = d3.scaleLinear().domain([0, 75100]).range([15, graphWidth - 15])

    //y scale
    let leftScale = d3.scaleLinear().domain([32000, 92000]).range([graphHeight - 15, 15])

    let leftAxis = d3.axisLeft(leftScale).ticks(6).tickFormat(d3.format(".0s"));
    yAxisArea.append("g").attr("class", "y axis").call(leftAxis);
    let bottomAxis = d3.axisBottom(bottomScale);
    xAxisArea.append("g").attr("class", "x axis").call(bottomAxis);
    /*
        let yGridlines = d3.axisLeft(incomeScale).ticks(6).tickSize(-graphWidth - 30).tickFormat("");
        yAxisArea.append("g").attr("class", "y gridlines").call(yGridlines);
        let xGridlines = d3.axisBottom(tuitionScale).tickSize(-graphHeight - 30).tickFormat("");
        xAxisArea.append("g").attr("class", "x gridlines").call(xGridlines);*/

    let format = d3.format(".2%")
    //giving diversity percentages in data (all total enrollment values are same)
    finalData.forEach(d => {
      denom = d["('total_enrollment', 'Asian')"]
      d["Indian_Native"] = format(d["('enrollment', 'American Indian / Alaska Native')"] / denom)
      d["Asian"] = format(d["('enrollment', 'Asian')"] / denom)
      d["Black"] = format(d["('enrollment', 'Black')"] / denom)
      d["Hispanic"] = format(d["('enrollment', 'Hispanic')"] / denom)
      d["Hawaiian_Islander"] = format(d["('enrollment', 'Native Hawaiian / Pacific Islander')"] / denom)
      d["Non_Resident_Foreign"] = format(d["('enrollment', 'Non-Resident Foreign')"] / denom)
      d["Total_minority"] = format(d["'enrollment', 'Total Minority')"] / denom)
      d["two_or_more_races"] = format(d["('enrollment', 'Two Or More Races')"] / denom)
      d["Unknown"] = format(d["('enrollment', 'Unknown')"] / denom)
      d["White"] = format(d["('enrollment', 'White')"] / denom)
      d["Women"] = format(d["('enrollment', 'Women')"] / denom)
      d["Men"] = format(1 - (d["('enrollment', 'Women')"] / denom))
      d["('enrollment', 'Men')"] = parseInt(denom) - parseInt(d["('enrollment', 'Women')"])
      d["total"] = denom
      d["other"] = parseInt(d["('enrollment', 'Non-Resident Foreign')"]) + parseInt(d["('enrollment', 'Two Or More Races')"]) +
        parseInt(d["('enrollment', 'Unknown')"])
    })

    let j = 1
    let viewport = graphArea.append("g");
    let graphCircles = viewport.selectAll("circle.graph").data(finalData)
      .join("circle").attr("class", "graph")
      .attr("cx", d => {
        let avg = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
        return bottomScale(avg)
      })
      .attr("cy", d => {
        return leftScale(parseInt(d["early_career_pay"]))
      })
      .attr("r", 5)
      .attr("fill", "gray")
      .style("opacity", 0.6)
      .on("mousemove", function (event, d) {
        let data = d
        d3.select(this).attr("stroke", "black").attr("stroke-width", 4 / j + "px")
          .attr('r', 15 / j).style("opacity", 1)
        var text = "<b>Name:</b> " + d.name +
          "<br/><br/><b>Racial Diversity</b>" +
          "<br/>American Indian/Alaska Native: " + d.Indian_Native +
          "<br/>Asian: " + d.Asian +
          "<br/>Black: " + d.Black +
          "<br/>Hispanic: " + d.Hispanic +
          "<br/>Native Hawaiian/Pacific Islander: " + d.Hawaiian_Islander +
          "<br/>Non Resident Foreign: " + d.Non_Resident_Foreign +
          "<br/>White: " + d.White +
          "<br/>Two or more races: " + d.two_or_more_races +
          "<br/>Unknown: " + d.Unknown +
          "<br/><br/><b>Gender Diversity: </b>" +
          "<br/>Women: " + d.Women +
          "<br/>Men: " + d.Men;



        d3.select('#tooltipGraph').html(text)
          .style('left', (event.pageX + 25) + 'px')
          .style('top', (event.pageY - 28) + 'px').style('opacity', 1);


        //Reference: https://d3-graph-gallery.com/pie.html
        let pieData = [parseInt(d["('enrollment', 'Women')"]), (d["('total_enrollment', 'Women')"] - d["('enrollment', 'Women')"])]
        let pieScale = d3.scaleOrdinal(["#4665fc", "#f62d2d"])
        let pie = d3.pie().value(d => {
          return d
        })

        let arcGen = d3.arc().innerRadius(0).outerRadius(200)

        pieSvgArea.selectAll('arc').data(pie(pieData))
          .enter().append("path")
          .attr("d", arcGen)
          .attr("class", "arc")
          .attr("fill", d => {
            return pieScale(d.data)
          })


        pieSvgArea.selectAll("arc").data(pie(pieData))
          .enter().append("text")
          .text(d => {

            if (parseInt(data["('enrollment', 'Women')"]) < parseInt(data["('enrollment', 'Men')"])) {
              if (d.index == 1) {
                return "Women: " + d.value
              } else {
                return "Men: " + d.value
              }
            } else {
              if (d.index == 1) {
                return "Men: " + d.value
              } else {
                return "Women: " + d.value
              }
            }
          })
          .attr("transform", d => {
            return "translate(" + arcGen.centroid(d) + ")"
          })
          .style("text-anchor", "middle")


        let divData = [parseInt(d["('enrollment', 'American Indian / Alaska Native')"]),
        parseInt(d["('enrollment', 'Asian')"]), parseInt("('enrollment', 'Black')"),
        parseInt(d["('enrollment', 'Hispanic')"]), parseInt(d["('enrollment', 'Native Hawaiian / Pacific Islander')"]),
        parseInt(d["('enrollment', 'White')"]), parseInt(d["other"])]

        let divScale = d3.scaleOrdinal(["green", "red", "purple", "orange", "brown", "blue", "black"])
        let pieDiv = d3.pie().value(d => {
          return d
        })
        let arcGenTwo = d3.arc().innerRadius(0).outerRadius(200)

        pieDivArea.selectAll('arc').data(pieDiv(divData))
          .enter().append("path")
          .attr('d', arcGenTwo)
          .attr("class", "arc")
          .attr("fill", d => {
            return divScale(d.data)
          })

        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -150)
          .text(d => {
            return "Asian: " + parseInt(data["('enrollment', 'Asian')"])
          })
          .attr("id", "color4")
          .style("fill", "red")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")
        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -135)
          .text(d => {
            return "White: " + parseInt(data["('enrollment', 'White')"])
          })
          .attr("id", "color4")
          .style("fill", "blue")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")
        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -120)
          .text(d => {
            return "American Indian: " + parseInt(data["('enrollment', 'American Indian / Alaska Native')"])
          })
          .attr("id", "color4")
          .style("fill", "green")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")
        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -105)
          .text(d => {
            return "Black: " + parseInt(data["('enrollment', 'Black')"])
          })
          .attr("id", "color4")
          .style("fill", "purple")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")
        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -90)
          .text(d => {
            return "Hispanic: " + parseInt(data["('enrollment', 'Hispanic')"])
          })
          .attr("id", "color4")
          .style("fill", "orange")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")
        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -75)
          .text(d => {
            return "Native Hawaiian: " + parseInt(data["('enrollment', 'Native Hawaiian / Pacific Islander')"])
          })
          .attr("id", "color4")
          .style("fill", "brown")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")
        pieDivArea.append("text")
          .attr("x", 210)
          .attr("y", -60)
          .text(d => {
            return "Other: " + parseInt(data["other"])
          })
          .attr("id", "color4")
          .style("fill", "black")
          .style("font-weight", "bold")
          .style('pointer-events', "none")
          .style('font-size', "13px")


      })
      .on('mouseleave', function () {
        d3.select(this).attr("stroke", "none").attr('r', 5 / j).style("opacity", "0.6")
        d3.select('#tooltipGraph').style('opacity', 0)
        pieSvgArea.selectAll("*").remove()
        pieDivArea.selectAll("*").remove()
      });






    let zoomExtent = [[0, 0], [graphWidth, graphHeight]];
    let translateExtent = [[-100, -100], [graphWidth + 100, graphHeight + 100]];
    var plotZoom = d3.zoom()
      .extent(zoomExtent)
      .translateExtent(translateExtent)
      .scaleExtent([1, 10])
      .on("zoom", plotZoomed);

    graphArea.call(plotZoom);


    function plotZoomed({ transform }) {
      viewport.attr("transform", transform);

      let xScale = transform.rescaleX(bottomScale);
      let yScale = transform.rescaleY(leftScale);
      bottomAxis.scale(xScale);
      leftAxis.scale(yScale);
      /*
      yGridlines.scale(txScale);
      xGridlines.scale(tyScale);*/
      d3.select("g.y.axis").call(leftAxis);
      d3.select("g.x.axis").call(bottomAxis);

      /*
      d3.select("g.y.gridlines").call(yGridlines);
      d3.select("g.x.gridlines").call(xGridlines);*/


      graphCircles.attr("r", 5 / transform.k);
      j = transform.k
    }
    graphArea.call(plotZoom.transform, d3.zoomIdentity);


    //changing x and y axis
    document.getElementById("x-select").onchange = function () {
      let changeX = document.getElementById("x-select").value

      console.log(changeX)
      if (changeX == "betterWorld") {
        bottomScale = d3.scaleLinear().domain([30, 100]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cx", d => {
          if (isNaN(parseInt(d["make_world_better_percent"])) == false) {
            return bottomScale(parseInt(d["make_world_better_percent"]))
          }
        })
      } else if (changeX == "income") {
        bottomScale = d3.scaleLinear().domain([32000, 92000]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cx", d => {
          return bottomScale(parseInt(d["early_career_pay"]))
        })
      } else if (changeX == "tuition") {
        bottomScale = d3.scaleLinear().domain([0, 75100]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cx", d => {
          let avg = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
          return bottomScale(avg)
        })
      } else if (changeX == "stem") {
        bottomScale = d3.scaleLinear().domain([0, 100]).range([15, graphWidth - 15])
        let bottomAxis = d3.axisBottom(bottomScale)
        d3.select("g.x.axis").call(bottomAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cx", d => {
          return bottomScale(d["stem_percent"])
        })
      }




    }
    document.getElementById("y-select").onchange = function () {
      let changeY = document.getElementById("y-select").value

      console.log(changeY)
      if (changeY == "betterWorld") {
        leftScale = d3.scaleLinear().domain([30, 100]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cy", d => {
          if (isNaN(parseInt(d["make_world_better_percent"])) == false) {
            return leftScale(parseInt(d["make_world_better_percent"]))
          }
        })
      } else if (changeY == "income") {
        leftScale = d3.scaleLinear().domain([32000, 92000]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cy", d => {
          return leftScale(parseInt(d["early_career_pay"]))
        })
      } else if (changeY == "tuition") {
        leftScale = d3.scaleLinear().domain([0, 75100]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cy", d => {
          let avg = (parseInt(d["in_state_total"]) + parseInt(d["out_of_state_total"])) / 2
          return leftScale(avg)
        })
      } else if (changeY == "stem") {
        leftScale = d3.scaleLinear().domain([0, 100]).range([graphHeight - 15, 15])
        let leftAxis = d3.axisLeft(leftScale)
        d3.select("g.y.axis").call(leftAxis)
        d3.selectAll("circle.graph").transition().duration(700).attr("cy", d => {
          return leftScale(d["stem_percent"])
        })
      }
    }
    //additional button filters for scatterplot
    const button3 = document.getElementById("button3")
    let filterClicked;
    button3.onclick = function () {
      if (filterClicked == true) {
        filterClicked = false
        d3.selectAll("#color").remove()
        d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
          return "gray"
        }).style("opacity", "none")
      } else {
        if (filter2Clicked == true || filter3Clicked == true) {
          filter2Clicked = false
          filter3Clicked = false
          d3.selectAll("#color2").remove()
          d3.selectAll("#color3").remove()
          d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
            filterClicked = true
            if (d["type"] == "Public") {
              return "red"
            } else {
              return "blue"
            }
          }).style("opacity", 0.6)
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 100)
            .transition().duration(700)
            .text("Public")
            .attr("id", "color")
            .style("fill", "red")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 115)
            .transition().duration(700)
            .text("Private")
            .attr("id", "color")
            .style("fill", "blue")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")

          filterClicked = true;
        } else {
          d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
            filterClicked = true
            if (d["type"] == "Public") {
              return "red"
            } else {
              return "blue"
            }
          }).style("opacity", 0.6)
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 100)
            .transition().duration(700)
            .text("Public")
            .attr("id", "color")
            .style("fill", "red")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 115)
            .transition().duration(700)
            .text("Private")
            .attr("id", "color")
            .style("fill", "blue")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")

          filterClicked = true;
        }

      }
    }
    const button4 = document.getElementById("button4")
    let filter2Clicked;
    button4.onclick = function () {
      if (filter2Clicked == true) {
        filter2Clicked = false
        d3.selectAll("#color2").remove()
        d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
          return "gray"
        }).style("opacity", "none")
      } else {
        if (filterClicked == true || filter3Clicked == true) {
          filterClicked = false
          filter3Clicked = false
          d3.selectAll("#color").remove()
          d3.selectAll("#color3").remove()
          d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
            filter2Clicked = true
            if (parseInt(d["('total_enrollment', 'Women')"] - d["('enrollment', 'Women')"]) > parseInt(d["('enrollment', 'Women')"])) {
              return "red"
            } else {
              return "blue"
            }
          }).style("opacity", 0.6)
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 100)
            .transition().duration(700)
            .text("Men Majority")
            .attr("id", "color2")
            .style("fill", "red")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 115)
            .transition().duration(700)
            .text("Women Majority")
            .attr("id", "color2")
            .style("fill", "blue")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          filter2Clicked = true;
        } else {
          d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
            filter2Clicked = true
            if (parseInt(d["('total_enrollment', 'Women')"] - d["('enrollment', 'Women')"]) > parseInt(d["('enrollment', 'Women')"])) {
              return "red"
            } else {
              return "blue"
            }
          }).style("opacity", 0.6)
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 100)
            .transition().duration(700)
            .text("Men Majority")
            .attr("id", "color2")
            .style("fill", "red")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style("font-size", "16px")
          graphArea.append("text")
            .attr("x", 810)
            .attr("y", 115)
            .transition().duration(700)
            .text("Women Majority")
            .attr("id", "color2")
            .style("fill", "blue")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")

          filter2Clicked = true;
        }
      }
    }
    const button5 = document.getElementById("button5")
    let filter3Clicked;
    button5.onclick = function () {
      if (filter3Clicked == true) {
        filter3Clicked = false
        d3.selectAll("#color3").remove()
        d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
          return "gray"
        }).style("opacity", "none")
      } else {
        if (filterClicked == true || filter2Clicked == true) {
          filterClicked = false
          filter2Clicked = false
          d3.selectAll("#color").remove()
          d3.selectAll("#color2").remove()
          d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
            filter3Clicked = true
            if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Asian')"]) {
              return "red"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'White')"]) {
              return "blue"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'American Indian / Alaska Native')"]) {
              return "green"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Black')"]) {
              return "purple"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Hispanic')"]) {
              return "orange"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Native Hawaiian / Pacific Islander')"]) {
              return "brown"
            } else {
              return "black"
            }
          }).style("opacity", 0.6)
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 100)
            .transition().duration(700)
            .text("Asian Majority")
            .attr("id", "color3")
            .style("fill", "red")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 115)
            .transition().duration(700)
            .text("White Majority")
            .attr("id", "color3")
            .style("fill", "blue")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 130)
            .transition().duration(700)
            .text("American Indian/Alaska Native Majority")
            .attr("id", "color3")
            .style("fill", "green")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 145)
            .transition().duration(700)
            .text("Black Majority")
            .attr("id", "color3")
            .style("fill", "purple")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 160)
            .transition().duration(700)
            .text("Hispanic Majority")
            .attr("id", "color3")
            .style("fill", "orange")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 175)
            .transition().duration(700)
            .text("Native Hawaiian/Pacific Islander Majority")
            .attr("id", "color3")
            .style("fill", "brown")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 190)
            .transition().duration(700)
            .text("Other Majority")
            .attr("id", "color3")
            .style("fill", "black")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          filter3Clicked = true;
        } else {
          d3.selectAll("circle.graph").transition().duration(700).attr("fill", d => {
            filter3Clicked = true
            if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Asian')"]) {
              return "red"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'White')"]) {
              return "blue"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'American Indian / Alaska Native')"]) {
              return "green"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Black')"]) {
              return "purple"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Hispanic')"]) {
              return "orange"
            } else if (Math.max(d["('enrollment', 'American Indian / Alaska Native')"], Math.max(d["('enrollment', 'Asian')"],
              Math.max(d["('enrollment', 'Black')"], Math.max(d["('enrollment', 'Hispanic')"],
                Math.max(d["('enrollment', 'Native Hawaiian / Pacific Islander')"],
                  Math.max(d["('enrollment', 'Non-Resident Foreign')"], Math.max(d["('enrollment', 'Unknown')"],
                    d["('enrollment', 'White')"]))))))) == d["('enrollment', 'Native Hawaiian / Pacific Islander')"]) {
              return "brown"
            } else {
              return "black"
            }
          }).style("opacity", 0.6)
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 100)
            .transition().duration(700)
            .text("Asian Majority")
            .attr("id", "color3")
            .style("fill", "red")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 115)
            .transition().duration(700)
            .text("White Majority")
            .attr("id", "color3")
            .style("fill", "blue")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 130)
            .transition().duration(700)
            .text("American Indian/Alaska Native Majority")
            .attr("id", "color3")
            .style("fill", "green")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 145)
            .transition().duration(700)
            .text("Black Majority")
            .attr("id", "color3")
            .style("fill", "purple")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 160)
            .transition().duration(700)
            .text("Hispanic Majority")
            .attr("id", "color3")
            .style("fill", "orange")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 175)
            .transition().duration(700)
            .text("Native Hawaiian/Pacific Islander Majority")
            .attr("id", "color3")
            .style("fill", "brown")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          graphArea.append("text")
            .attr("x", 650)
            .attr("y", 190)
            .transition().duration(700)
            .text("Other Majority")
            .attr("id", "color3")
            .style("fill", "black")
            .style("font-weight", "bold")
            .style('pointer-events', "none")
            .style('font-size', "16px")
          filter3Clicked = true;
        }
      }
    }



    //TO DO move buttons so that it looks better in deploy; style buttons
  }
  render();
</script>

</html>